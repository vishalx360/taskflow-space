generator client {
    provider = "prisma-client-js"
}

// generator erd {
//     provider = "prisma-erd-generator"
//     theme    = "neutral"
//     output   = "taskflow-er-diagram.pdf"
// }

// datasource db {
//     provider = "postgresql"
//     url      = env("DATABASE_URL")
// }

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Authentication schema ----------------------------------------------------
model User {
    id                       String                      @id @default(cuid())
    name                     String?
    email                    String?                     @unique
    emailVerified            DateTime?
    image                    String?
    password                 String?
    accounts                 Account[]
    sessions                 Session[]
    passkeys                 Passkey[]
    // extra fields
    tasks                    TaskMember[]
    workspaces               WorkspaceMember[]
    workspaceInvitations     WorkspaceMemberInvitation[] @relation("recepientRelation")
    sentWorkspaceInvitations WorkspaceMemberInvitation[] @relation("senderRelation")

    @@index([email])
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ResetPasswordToken {
    id      String   @id @default(cuid())
    expires DateTime
    email   String
}

model Passkey {
    id                  String   @id @default(cuid())
    name                String
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId              String
    createdAt           DateTime @default(now())
    lastUsed            DateTime @default(now())
    // core fields
    counter             Int
    credentialID        String   @db.Text
    credentialPublicKey String   @db.Text
    transports          String[]
}

// Custom schema -------------------------------------------------------------
model Workspace {
    id                         String                      @id @default(cuid())
    createdAt                  DateTime                    @default(now())
    name                       String
    boards                     Board[]
    personal                   Boolean                     @default(false)
    members                    WorkspaceMember[]
    workspaceMemberInvitations WorkspaceMemberInvitation[]
}

enum WorkspaceMemberRoles {
    OWNER // Can invite new members, delete existing members and admins and delete the workspace or transfer ownership
    ADMIN // Can invite new members and delete existing members
    MEMBER // Can create or update tasks, lists but can not delete the workspace or any board
}

model WorkspaceMember {
    id          String               @id @default(cuid())
    userId      String
    user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    role        WorkspaceMemberRoles @default(MEMBER)
    Workspace   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    memberSince DateTime             @default(now())

    @@index([userId, workspaceId])
}

model WorkspaceMemberInvitation {
    id             String               @id @default(cuid())
    recepient      User?                @relation("recepientRelation", fields: [recepientId], references: [id])
    recepientId    String?
    recepientEmail String
    sender         User                 @relation("senderRelation", fields: [senderId], references: [id])
    senderId       String
    role           WorkspaceMemberRoles @default(MEMBER)
    Workspace      Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId    String
    createdAt      DateTime             @default(now())

    @@index([recepientEmail])
}

model Board {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String
    description String?
    Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    lists       List[]
    background  String    @default("gradient:linear-gradient(to right, #0f2027, #203a43, #2c5364)")
}

model List {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String
    Board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId   String
    tasks     Task[]
}

model Task {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    title       String
    description String?      @db.Text
    list        List         @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId      String
    rank        String
    members     TaskMember[]
}

model TaskMember {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    @@index([userId, taskId])
}
